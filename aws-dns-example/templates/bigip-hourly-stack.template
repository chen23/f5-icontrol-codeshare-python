{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Description": "Template Version 2.1.0: AWS CloudFormation Template for creating a 2NIC BIG-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.\nGenerated by: master_template.py --develop -s existing --import_eni --static_password -n 2 -l hourly --components dns",
 "Mappings": {
  "BigipRegionMap": {
   "ap-northeast-1": {
    "Best1000Mbps": "ami-c64204a1",
    "Best200Mbps": "ami-c54503a2",
    "Best25Mbps": "ami-d54305b2",
    "Better1000Mbps": "ami-8f4204e8",
    "Better200Mbps": "ami-ff440298",
    "Better25Mbps": "ami-7a387e1d",
    "Good1000Mbps": "ami-7d44021a",
    "Good200Mbps": "ami-38387e5f",
    "Good25Mbps": "ami-fe440299"
   },
   "ap-northeast-2": {
    "Best1000Mbps": "ami-7359881d",
    "Best200Mbps": "ami-4358892d",
    "Best25Mbps": "ami-4058892e",
    "Better1000Mbps": "ami-d65687b8",
    "Better200Mbps": "ami-4258892c",
    "Better25Mbps": "ami-e554858b",
    "Good1000Mbps": "ami-fb598895",
    "Good200Mbps": "ami-d15687bf",
    "Good25Mbps": "ami-3c588952"
   },
   "ap-south-1": {
    "Best1000Mbps": "ami-fd671692",
    "Best200Mbps": "ami-816213ee",
    "Best25Mbps": "ami-d86716b7",
    "Better1000Mbps": "ami-3d651452",
    "Better200Mbps": "ami-f8671697",
    "Better25Mbps": "ami-3465145b",
    "Good1000Mbps": "ami-9e6514f1",
    "Good200Mbps": "ami-966415f9",
    "Good25Mbps": "ami-0462136b"
   },
   "ap-southeast-1": {
    "Best1000Mbps": "ami-92db6ff1",
    "Best200Mbps": "ami-94da6ef7",
    "Best25Mbps": "ami-38c6725b",
    "Better1000Mbps": "ami-1bc57178",
    "Better200Mbps": "ami-afdb6fcc",
    "Better25Mbps": "ami-36c67255",
    "Good1000Mbps": "ami-dbc470b8",
    "Good200Mbps": "ami-0ac47069",
    "Good25Mbps": "ami-17c57174"
   },
   "ap-southeast-2": {
    "Best1000Mbps": "ami-d51d1bb6",
    "Best200Mbps": "ami-311d1b52",
    "Best25Mbps": "ami-8e1b1ded",
    "Better1000Mbps": "ami-ae1a1ccd",
    "Better200Mbps": "ami-f31a1c90",
    "Better25Mbps": "ami-451a1c26",
    "Good1000Mbps": "ami-281d1b4b",
    "Good200Mbps": "ami-891b1dea",
    "Good25Mbps": "ami-f41a1c97"
   },
   "ca-central-1": {
    "Best1000Mbps": "ami-dac07dbe",
    "Best200Mbps": "ami-adc07dc9",
    "Best25Mbps": "ami-51c37e35",
    "Better1000Mbps": "ami-d9c07dbd",
    "Better200Mbps": "ami-e8c37e8c",
    "Better25Mbps": "ami-d1c479b5",
    "Good1000Mbps": "ami-5bc77a3f",
    "Good200Mbps": "ami-d0c479b4",
    "Good25Mbps": "ami-dec17cba"
   },
   "eu-central-1": {
    "Best1000Mbps": "ami-cd0dc4a2",
    "Best200Mbps": "ami-560fc639",
    "Best25Mbps": "ami-0d0cc562",
    "Better1000Mbps": "ami-000fc66f",
    "Better200Mbps": "ami-a80bc2c7",
    "Better25Mbps": "ami-090cc566",
    "Good1000Mbps": "ami-bc09c0d3",
    "Good200Mbps": "ami-cb0dc4a4",
    "Good25Mbps": "ami-df0cc5b0"
   },
   "eu-west-1": {
    "Best1000Mbps": "ami-25663d43",
    "Best200Mbps": "ami-00613a66",
    "Best25Mbps": "ami-a9663dcf",
    "Better1000Mbps": "ami-b1673cd7",
    "Better200Mbps": "ami-40673c26",
    "Better25Mbps": "ami-b8663dde",
    "Good1000Mbps": "ami-ba663ddc",
    "Good200Mbps": "ami-1b613a7d",
    "Good25Mbps": "ami-2e613a48"
   },
   "eu-west-2": {
    "Best1000Mbps": "ami-f6465392",
    "Best200Mbps": "ami-53465337",
    "Best25Mbps": "ami-f7465393",
    "Better1000Mbps": "ami-04425760",
    "Better200Mbps": "ami-5c415438",
    "Better25Mbps": "ami-13425777",
    "Good1000Mbps": "ami-12425776",
    "Good200Mbps": "ami-3d405559",
    "Good25Mbps": "ami-ae4154ca"
   },
   "sa-east-1": {
    "Best1000Mbps": "ami-c85c38a4",
    "Best200Mbps": "ami-ce5c38a2",
    "Best25Mbps": "ami-1751357b",
    "Better1000Mbps": "ami-a05337cc",
    "Better200Mbps": "ami-fd5c3891",
    "Better25Mbps": "ami-805236ec",
    "Good1000Mbps": "ami-3053375c",
    "Good200Mbps": "ami-0052366c",
    "Good25Mbps": "ami-835236ef"
   },
   "us-east-1": {
    "Best1000Mbps": "ami-fe16eee8",
    "Best200Mbps": "ami-190af20f",
    "Best25Mbps": "ami-4f0af259",
    "Better1000Mbps": "ami-4617ef50",
    "Better200Mbps": "ami-c315edd5",
    "Better25Mbps": "ami-9f17ef89",
    "Good1000Mbps": "ami-7c08f06a",
    "Good200Mbps": "ami-fa14ecec",
    "Good25Mbps": "ami-d815edce"
   },
   "us-east-2": {
    "Best1000Mbps": "ami-810326e4",
    "Best200Mbps": "ami-25002540",
    "Best25Mbps": "ami-6901240c",
    "Better1000Mbps": "ami-860326e3",
    "Better200Mbps": "ami-36002553",
    "Better25Mbps": "ami-ba0025df",
    "Good1000Mbps": "ami-840326e1",
    "Good200Mbps": "ami-9b0124fe",
    "Good25Mbps": "ami-870326e2"
   },
   "us-west-1": {
    "Best1000Mbps": "ami-ffb9e49f",
    "Best200Mbps": "ami-5dbbe63d",
    "Best25Mbps": "ami-c7b8e5a7",
    "Better1000Mbps": "ami-11b8e571",
    "Better200Mbps": "ami-b2bee3d2",
    "Better25Mbps": "ami-11bfe271",
    "Good1000Mbps": "ami-24bee344",
    "Good200Mbps": "ami-25bee345",
    "Good25Mbps": "ami-23bee343"
   },
   "us-west-2": {
    "Best1000Mbps": "ami-3157ec51",
    "Best200Mbps": "ami-fc51ea9c",
    "Best25Mbps": "ami-5e50eb3e",
    "Better1000Mbps": "ami-fb53e89b",
    "Better200Mbps": "ami-3d57ec5d",
    "Better25Mbps": "ami-6c50eb0c",
    "Good1000Mbps": "ami-6d50eb0d",
    "Good200Mbps": "ami-6f50eb0f",
    "Good25Mbps": "ami-935ce7f3"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz2",
      "subnet1Az2",
      "bigipManagementSecurityGroup",
      "subnet1Az1",
      "bigipExternalSecurityGroup",
      "availabilityZone1",
      "availabilityZone2"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "adminPassword"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigipExternalSecurityGroup": {
     "default": "External Security Group"
    },
    "bigipManagementSecurityGroup": {
     "default": "Management Security Group"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key1"
    },
    "licenseKey2": {
     "default": "License Key2"
    },
    "managementGuiPort": {
     "default": "Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "owner": {
     "default": "Owner"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for SSH Access"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet AZ1"
    },
    "subnet1Az2": {
     "default": "Subnet AZ2"
    }
   }
  },
  "Version": "2.1.0"
 },
 "Outputs": {
  "ApplicationData": {
   "Description": "The data passed back as part of signalling the WaitCondition",
   "Value": {
    "Fn::GetAtt": [
     "myWaitCondition",
     "Data"
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1Url": {
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  }
 },
 "Parameters": {
  "EniStackName": {
   "Description": "Name of ENI stack",
   "Type": "String"
  },
  "adminPassword": {
   "ConstraintDescription": "Verify your BIG-IP VE Admin Password",
   "Description": "BIG-IP VE Admin Password",
   "MaxLength": "255",
   "MinLength": "1",
   "NoEcho": true,
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP VE image",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "t2.medium",
    "t2.large",
    "m3.xlarge",
    "m3.2xlarge",
    "m4.large",
    "m4.xlarge",
    "m4.2xlarge",
    "m4.4xlarge",
    "m4.10xlarge",
    "c3.2xlarge",
    "c3.4xlarge",
    "c3.8xlarge",
    "c4.xlarge",
    "c4.2xlarge",
    "c4.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m3.2xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Default": "0.0.0.0/0",
   "Description": " The IP address range that can be used to SSH to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "Key pair for accessing the instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "001-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "002-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloudlibs-install.log < /dev/null &"
          ]
         ]
        }
       },
       "003-1nic-setup": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "004-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/createUser.sh",
           " --cl-args admin",
           " --log-level debug",
           " -o /var/log/createUser.log",
           " &>> /var/log/cloudlibs-install.log < /dev/null &"
          ]
         ]
        }
       },
       "005-onboard-BIG-IP": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "NAME_SERVER=`/config/getNameServer.sh eth1`;",
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js",
           "--wait-for ADMIN_CREATED",
           "-o /var/log/onboard.log",
           "--log-level debug",
           "--no-reboot",
           "--host localhost",
           "--user admin",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
           "--ntp 0.us.pool.ntp.org",
           "--ntp 1.us.pool.ntp.org",
           "--tz UTC",
           "--dns ${NAME_SERVER}",
           "--module ltm:nominal",
           "--module gtm:nominal",
           "--ping",
           "&>> /var/log/cloudlibs-install.log < /dev/null &"
          ]
         ]
        }
       },
       "006-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/custom-config.log",
           "--log-level debug",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloudlibs-install.log < /dev/null &"
          ]
         ]
        }
       },
       "007-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "008-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-password.sh",
           "-o /var/log/rm-password.log",
           "--log-level debug",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal PASSWORD_REMOVED",
           "&>> /var/log/cloudlibs-install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/.adminPassword": {
        "content": {
         "Ref": "adminPassword"
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/createUser.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "PASSWORD=$(/bin/sed -e $'s:[\\'\"%{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g' < /config/cloud/aws/.adminPassword)",
           "if [ \"$1\" = admin ]; then",
           "    tmsh modify auth user \"$1\" password ${PASSWORD}",
           "else",
           "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }",
           "fi"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "date\n",
           "echo 'starting tmsh config'\n",
           "tmsh create net vlan external interfaces add { 1.1 } \n",
           "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "BIGIP_MGMT_ADDRESS='",
           {
            "Fn::ImportValue": {
             "Fn::Sub": "${EniStackName}-Bigip1ManagementInterfacePrivateIp"
            }
           },
           "'\n",
           "GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print tolower($5)}'`\n",
           "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
           "EXTIP='",
           {
            "Fn::ImportValue": {
             "Fn::Sub": "${EniStackName}-Bigip1ExternalInterfacePrivateIp"
            }
           },
           "'\n",
           "EXTMASK=${GATEWAY_PREFIX}\n",
           "tmsh create net self ${EXTIP}/${EXTMASK} vlan external allow-service add { tcp:4353 }\n",
           "tmsh create net route default gw ${GATEWAY}\n",
           "tmsh save /sys config\n",
           "date\n",
           "### START CUSTOM TMSH CONFIGURTION\n",
           "### END CUSTOM TMSH CONFIGURATION",
           "\n",
           "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-signal \"",
           {
            "Ref": "myWaitHandle"
           },
           "\"\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-password.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "date\n",
           "echo 'starting rm-password.sh'\n",
           "rm /config/cloud/aws/.adminPassword\n",
           "date\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/develop/dist/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/develop/dist/f5-cloud-libs.tar.gz"
       },
       "/config/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
           "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "#if ! tmsh load sys config merge file /config/verifyHash; then",
           "#    echo cannot validate signature of /config/verifyHash",
           "#    exit",
           "#fi",
           "#echo loaded verifyHash",
           "#declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "#for fileToVerify in \"${filesToVerify[@]}\"",
           "#do",
           "#    echo verifying \"$fileToVerify\"",
           "#    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "#        echo \"$fileToVerify\" is not valid",
           "#        exit 1",
           "#    fi",
           "#    echo verified \"$fileToVerify\"",
           "#done",
           "mkdir -p /config/cloud/aws/node_modules",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "cli script /Common/verifyHash {",
           "    proc script::run {} {",
           "        if {[catch {",
           "            set hashes(f5-cloud-libs.tar.gz) 2fe3a932e1195be3ba5c272bbdf5eefd963b838470c48205d3fa0730cb7836a3b76dd927944aa3261a92e53518ce10aebc5a445f93b43f3b5c12fac884106ae4",
           "            set hashes(f5-cloud-libs-aws.tar.gz) 22b554337b27802b7794206462bb98d346a7241622c11bcf9e834a06bcd1bd1b5b99efee512ac6eebe64e9d34f3024bcb569371fd4ee79006761bc5e5a74a59c",
           "            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
           "            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
           "            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
           "",
           "            set file_path [lindex $tmsh::argv 1]",
           "            set file_name [file tail $file_path]",
           "",
           "            if {![info exists hashes($file_name)]} {",
           "                tmsh::log err \"No hash found for $file_name\"",
           "                exit 1",
           "            }",
           "",
           "            set expected_hash $hashes($file_name)",
           "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
           "            if { $expected_hash eq $computed_hash } {",
           "                exit 0",
           "            }",
           "            tmsh::log err \"Hash does not match for $file_path\"",
           "            exit 1",
           "        }]} {",
           "            tmsh::log err {Unexpected error in verifyHash}",
           "            exit 1",
           "        }",
           "    }",
           "    script-signature dTsQJ2YdaaLJ3TzuB1XPi8fAeghkTUTdltfuW0cMndHHeLXMZBX/KSN+Dhnb0aFb1QCpDYJvZ38DmBy9gq1ETqcfxpoa1yj2Id144/JyFkIAyzD6sIslsCsFnwfpXWk1+Rqdrn1WoEjtyOZ7OSadhzVUQTctczVzwrK+SHoNKOZR2xtoQfpL0sBTj/g2cMioyk9bE9Y2hL2tfYGJTrgUM7hnKcyqL4dkDjurnBYOMWy+/SmYc/NvrbyA53xx6W9gNqGDd6j7+zqg3cmpCZFD+ca96wj0iiKAZcM0vYLaxp9LWEWX/fVlvUtUf7Y569OkbjBQQhuoEv45gjU6RG6eaA==",
           "    signing-key /Common/f5-irule",
           "}",
           ""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "ImageId": {
     "Fn::FindInMap": [
      "BigipRegionMap",
      {
       "Ref": "AWS::Region"
      },
      {
       "Ref": "imageName"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Fn::ImportValue": {
        "Fn::Sub": "${EniStackName}-Bigip1ManagementInterface"
       }
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Fn::ImportValue": {
        "Fn::Sub": "${EniStackName}-Bigip1subnet1Az1Interface"
       }
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "myWaitCondition": {
   "Properties": {
    "Handle": {
     "Ref": "myWaitHandle"
    },
    "Timeout": "3600"
   },
   "Type": "AWS::CloudFormation::WaitCondition"
  },
  "myWaitHandle": {
   "Type": "AWS::CloudFormation::WaitConditionHandle"
  }
 }
}
